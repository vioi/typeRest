git init 在本地初始化一个工作目录
git add 将工作区内容写入缓存区，暂存文件，将文件的快照放入暂存区域
git commit -m '' 将缓存区内容添加到当前分支本地仓库，提交更新，找到暂存区域文件，将快照永久性存储到git仓库目录
    因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在git commit就是往master分支上提交更改。
git status 命令可以让我们时刻掌握仓库当前的状态
git diff '' 查看文件具体的修改内容
git log 查看提交记录的日志, 尾部添加--graph命令可以看到分支图。
在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当^然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
git reset --hard HEAD^ 回退到上一个版本
git reflog 记录
git reset HEAD <file>  可以把暂存区的上一次修改撤销(add或者rm指令)
    git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区
git checkout -- readme.txt 将工作区的内容还原至和暂存区一致

git rm  删掉，并且 git commit -m
ssh-keygen -t rsa -C '用户邮箱' 创建ssh Key
在主目录下找到.ssh文件下的id_rsa.pub文件，在github网站，打开setting-SSH and GPG keys，将复制淡淡公钥放进文本区域
在github上新建一个远程仓库，并关联
git remote add origin git@github.com:vivo/type.git 关联远程仓库origin
git push -u origin master 将本地仓库当前分支master推送到远程仓库origin
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
从现在起，只要本地作了提交，就可以通过命令：$ git push origin master

小结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
git clone 克隆远程仓库到本地

创建并管理分支：
git checkout -b mybranch  创建并切换到到分支mybranch;-b参数表示创建并切换，相当于以下两条命令
git branch mybranch 创建分支
git switch mybranch 切换分支
git branch 查看当前分支
git merge mybranch 把mybranch 分支的工作内容合并到master
合并完成后就可以放心的删除mybranch分支：git branch -d mybranch

小结：
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>或者git switch <name>
创建+切换分支：git checkout -b <name>或者git switch -c <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <file>

通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
--no-ff参数，表示禁用Fast forward
这次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去
git merge --no-ff -m "merge with no-ff" mybranch
    合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

Bug分支： 当有一个bug急需要修改，但是当前mybr分支的任务还没有完成，你不能通过在mybr分支上修复bug
    之后再合并到主分支上，因为时间来不及。所以：
   git stash 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

   （git status指令可以将工作区当前分支新增或修改的内容存储隐藏起来，
    可以通过git stash list 查看刚刚的工作现场stash
    git stash pop恢复工作现场并删除stash内容
）
git cherry-pick <版本号> 让我们能复制一个特定的提交到当前分支



/对于先建的远程仓库，本地关联后push推送报错的问题，因为远程仓库创建时选中了创建readme.md文件
推送远程仓库时，发现本地缺失readme.md及相关记录，则推送失败。可以通过pull 拉取并合并远程仓库的内容到本地
/
push   推送本地修改分支至远程git仓库
git push -u origin feature-wxDemo
　　

fetch与pull

fetch是将远程主机的最新内容拉到本地，不进行合并

git fetch origin master
　　
pull 则是将远程主机的master分支最新内容拉下来后与当前本地分支直接合并 fetch+merge

git pull origin master  //拉取
local change ccccccccccbbbbbbbb
xxxxxxxxx
、、、、
vvvvvvvvvvvvvvvvvvvvvvvvv
github changee
github change2222
afafafsafa
bbbbbbbb
bnm
faassfasf
